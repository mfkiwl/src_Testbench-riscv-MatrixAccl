/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Thu Nov 29 16:06:08 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkHardwareTestBench.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_1(" %d ", 4u);


/* Constructor */
MOD_mkHardwareTestBench::MOD_mkHardwareTestBench(tSimStateHdl simHdl,
						 char const *name,
						 Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_c0(simHdl, "c0", this, 32u, 0u, (tUInt8)0u),
    INST_c1(simHdl, "c1", this, 32u, 0u, (tUInt8)0u),
    INST_clk(simHdl, "clk", this, 32u, 0u, (tUInt8)0u),
    INST_cnnR(simHdl, "cnnR", this),
    INST_cols(simHdl, "cols", this, 32u, 0u, (tUInt8)0u),
    INST_init(simHdl, "init", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_rows(simHdl, "rows", this, 32u, 0u, (tUInt8)0u),
    INST_test(simHdl, "test", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 13u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkHardwareTestBench::init_symbols_0()
{
  init_symbol(&symbols[0u], "c0", SYM_MODULE, &INST_c0);
  init_symbol(&symbols[1u], "c1", SYM_MODULE, &INST_c1);
  init_symbol(&symbols[2u], "clk", SYM_MODULE, &INST_clk);
  init_symbol(&symbols[3u], "cnnR", SYM_MODULE, &INST_cnnR);
  init_symbol(&symbols[4u], "cols", SYM_MODULE, &INST_cols);
  init_symbol(&symbols[5u], "init", SYM_MODULE, &INST_init);
  init_symbol(&symbols[6u], "RL_init_rule", SYM_RULE);
  init_symbol(&symbols[7u], "RL_layerIn", SYM_RULE);
  init_symbol(&symbols[8u], "RL_layerOut", SYM_RULE);
  init_symbol(&symbols[9u], "RL_update_clock", SYM_RULE);
  init_symbol(&symbols[10u], "rows", SYM_MODULE, &INST_rows);
  init_symbol(&symbols[11u], "test", SYM_MODULE, &INST_test);
  init_symbol(&symbols[12u], "x__h803", SYM_DEF, &DEF_x__h803, 32u);
}


/* Rule actions */

void MOD_mkHardwareTestBench::RL_init_rule()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    initialize_image();
  INST_init.METH_write((tUInt8)0u);
}

void MOD_mkHardwareTestBench::RL_update_clock()
{
  tUInt32 DEF_clk_PLUS_1___d5;
  tUInt32 DEF_test_PLUS_1___d3;
  tUInt32 DEF_b__h382;
  DEF_b__h382 = INST_test.METH_read();
  DEF_x__h803 = INST_clk.METH_read();
  DEF_test_PLUS_1___d3 = DEF_b__h382 + 1u;
  DEF_clk_PLUS_1___d5 = DEF_x__h803 + 1u;
  INST_test.METH_write(DEF_test_PLUS_1___d3);
  INST_clk.METH_write(DEF_clk_PLUS_1___d5);
}

void MOD_mkHardwareTestBench::RL_layerIn()
{
  tUInt32 DEF_rows_4_PLUS_1___d15;
  tUInt8 DEF_rows_4_SLE_15___d16;
  tUInt8 DEF_cols_0_EQ_15___d11;
  tUInt32 DEF_IF_cols_0_EQ_15_1_THEN_0_ELSE_cols_0_PLUS_1_2___d13;
  tUInt32 DEF_datas__h570;
  tUInt32 DEF_b__h427;
  tUInt32 DEF_rows___d14;
  tUInt32 DEF_b__h752;
  DEF_rows___d14 = INST_rows.METH_read();
  DEF_b__h427 = INST_cols.METH_read();
  DEF_b__h752 = readPixel1(DEF_rows___d14, DEF_b__h427, 0u);
  DEF_datas__h570 = (tUInt32)(1023u & DEF_b__h752);
  DEF_cols_0_EQ_15___d11 = DEF_b__h427 == 15u;
  DEF_IF_cols_0_EQ_15_1_THEN_0_ELSE_cols_0_PLUS_1_2___d13 = DEF_cols_0_EQ_15___d11 ? 0u : DEF_b__h427 + 1u;
  DEF_rows_4_SLE_15___d16 = primSLE8(1u, 32u, (tUInt32)(DEF_rows___d14), 32u, 15u);
  DEF_rows_4_PLUS_1___d15 = DEF_rows___d14 + 1u;
  INST_cols.METH_write(DEF_IF_cols_0_EQ_15_1_THEN_0_ELSE_cols_0_PLUS_1_2___d13);
  if (DEF_cols_0_EQ_15___d11)
    INST_rows.METH_write(DEF_rows_4_PLUS_1___d15);
  if (DEF_rows_4_SLE_15___d16)
    INST_cnnR.METH_put(DEF_datas__h570);
}

void MOD_mkHardwareTestBench::RL_layerOut()
{
  tUInt32 DEF_c1_2_PLUS_1___d41;
  tUInt8 DEF_c0_8_SLT_196_9_AND_c1_2_EQ_0_3___d34;
  tUInt8 DEF_NOT_c0_8_SLT_196_9_7_AND_c1_2_EQ_0_3___d38;
  tUInt8 DEF_NOT_c0_8_SLT_196_9___d37;
  tUInt8 DEF_NOT_c0_8_SLT_196_9_7_AND_NOT_c1_2_EQ_0_3_9___d40;
  tUInt8 DEF_c1_2_EQ_0___d33;
  tUInt32 DEF_IF_c0_8_SLT_196_9_THEN_c0_8_PLUS_1_0_ELSE_0___d31;
  tUInt32 DEF_b__h824;
  tUInt32 DEF_b__h886;
  tUInt32 DEF_v__h980;
  tUInt32 DEF_unsigned_cnnR_get_5___d36;
  tUInt8 DEF_c0_8_SLT_196___d29;
  tUInt32 DEF_AVMeth_cnnR_get;
  DEF_b__h886 = INST_c1.METH_read();
  DEF_b__h824 = INST_c0.METH_read();
  DEF_c0_8_SLT_196___d29 = primSLT8(1u, 32u, (tUInt32)(DEF_b__h824), 32u, 196u);
  DEF_IF_c0_8_SLT_196_9_THEN_c0_8_PLUS_1_0_ELSE_0___d31 = DEF_c0_8_SLT_196___d29 ? DEF_b__h824 + 1u : 0u;
  DEF_c1_2_EQ_0___d33 = DEF_b__h886 == 0u;
  DEF_NOT_c0_8_SLT_196_9___d37 = !DEF_c0_8_SLT_196___d29;
  DEF_NOT_c0_8_SLT_196_9_7_AND_NOT_c1_2_EQ_0_3_9___d40 = DEF_NOT_c0_8_SLT_196_9___d37 && !DEF_c1_2_EQ_0___d33;
  DEF_NOT_c0_8_SLT_196_9_7_AND_c1_2_EQ_0_3___d38 = DEF_NOT_c0_8_SLT_196_9___d37 && DEF_c1_2_EQ_0___d33;
  DEF_c0_8_SLT_196_9_AND_c1_2_EQ_0_3___d34 = DEF_c0_8_SLT_196___d29 && DEF_c1_2_EQ_0___d33;
  DEF_c1_2_PLUS_1___d41 = DEF_b__h886 + 1u;
  INST_c0.METH_write(DEF_IF_c0_8_SLT_196_9_THEN_c0_8_PLUS_1_0_ELSE_0___d31);
  if (DEF_c0_8_SLT_196___d29)
    DEF_AVMeth_cnnR_get = INST_cnnR.METH_get();
  DEF_v__h980 = DEF_AVMeth_cnnR_get;
  DEF_unsigned_cnnR_get_5___d36 = DEF_v__h980;
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_c0_8_SLT_196_9_AND_c1_2_EQ_0_3___d34)
      dollar_display(sim_hdl, this, "s,10", &__str_literal_1, DEF_unsigned_cnnR_get_5___d36);
  if (DEF_NOT_c0_8_SLT_196_9___d37)
    INST_rows.METH_write(0u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_c0_8_SLT_196_9_7_AND_c1_2_EQ_0_3___d38)
      dollar_finish(sim_hdl, "32", 0u);
  if (DEF_NOT_c0_8_SLT_196_9_7_AND_NOT_c1_2_EQ_0_3_9___d40)
    INST_c1.METH_write(DEF_c1_2_PLUS_1___d41);
}


/* Methods */


/* Reset routines */

void MOD_mkHardwareTestBench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_test.reset_RST(ARG_rst_in);
  INST_rows.reset_RST(ARG_rst_in);
  INST_init.reset_RST(ARG_rst_in);
  INST_cols.reset_RST(ARG_rst_in);
  INST_cnnR.reset_RST_N(ARG_rst_in);
  INST_clk.reset_RST(ARG_rst_in);
  INST_c1.reset_RST(ARG_rst_in);
  INST_c0.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkHardwareTestBench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkHardwareTestBench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_c0.dump_state(indent + 2u);
  INST_c1.dump_state(indent + 2u);
  INST_clk.dump_state(indent + 2u);
  INST_cnnR.dump_state(indent + 2u);
  INST_cols.dump_state(indent + 2u);
  INST_init.dump_state(indent + 2u);
  INST_rows.dump_state(indent + 2u);
  INST_test.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkHardwareTestBench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 9u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h803", 32u);
  num = INST_c0.dump_VCD_defs(num);
  num = INST_c1.dump_VCD_defs(num);
  num = INST_clk.dump_VCD_defs(num);
  num = INST_cols.dump_VCD_defs(num);
  num = INST_init.dump_VCD_defs(num);
  num = INST_rows.dump_VCD_defs(num);
  num = INST_test.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_cnnR.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkHardwareTestBench::dump_VCD(tVCDDumpType dt,
				       unsigned int levels,
				       MOD_mkHardwareTestBench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkHardwareTestBench::vcd_defs(tVCDDumpType dt, MOD_mkHardwareTestBench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_x__h803) != DEF_x__h803)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h803, 32u);
	backing.DEF_x__h803 = DEF_x__h803;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_x__h803, 32u);
      backing.DEF_x__h803 = DEF_x__h803;
    }
}

void MOD_mkHardwareTestBench::vcd_prims(tVCDDumpType dt, MOD_mkHardwareTestBench &backing)
{
  INST_c0.dump_VCD(dt, backing.INST_c0);
  INST_c1.dump_VCD(dt, backing.INST_c1);
  INST_clk.dump_VCD(dt, backing.INST_clk);
  INST_cols.dump_VCD(dt, backing.INST_cols);
  INST_init.dump_VCD(dt, backing.INST_init);
  INST_rows.dump_VCD(dt, backing.INST_rows);
  INST_test.dump_VCD(dt, backing.INST_test);
}

void MOD_mkHardwareTestBench::vcd_submodules(tVCDDumpType dt,
					     unsigned int levels,
					     MOD_mkHardwareTestBench &backing)
{
  INST_cnnR.dump_VCD(dt, levels, backing.INST_cnnR);
}
