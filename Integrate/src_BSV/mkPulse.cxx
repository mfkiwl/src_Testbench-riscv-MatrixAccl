/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Thu Nov 29 16:06:08 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkPulse.h"


/* Constructor */
MOD_mkPulse::MOD_mkPulse(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_port_0(simHdl, "port_0", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_port_1(simHdl, "port_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_readCounter(simHdl, "readCounter", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_writeCounter(simHdl, "writeCounter", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkPulse::init_symbols_0()
{
  init_symbol(&symbols[0u], "port_0", SYM_MODULE, &INST_port_0);
  init_symbol(&symbols[1u], "port_0__h350", SYM_DEF, &DEF_port_0__h350, 1u);
  init_symbol(&symbols[2u], "port_1", SYM_MODULE, &INST_port_1);
  init_symbol(&symbols[3u], "port_1__h362", SYM_DEF, &DEF_port_1__h362, 1u);
  init_symbol(&symbols[4u], "readCounter", SYM_MODULE, &INST_readCounter);
  init_symbol(&symbols[5u], "writeCounter", SYM_MODULE, &INST_writeCounter);
}


/* Rule actions */


/* Methods */

void MOD_mkPulse::METH_send()
{
  tUInt8 DEF_writeCounter_PLUS_1___d4;
  tUInt8 DEF_writeCounter_EQ_0___d2;
  tUInt8 DEF_writeCounter_EQ_1___d3;
  tUInt8 DEF_x__h218;
  DEF_x__h218 = INST_writeCounter.METH_read();
  DEF_writeCounter_EQ_1___d3 = DEF_x__h218 == (tUInt8)1u;
  DEF_writeCounter_EQ_0___d2 = DEF_x__h218 == (tUInt8)0u;
  DEF_writeCounter_PLUS_1___d4 = (tUInt8)1u & (DEF_x__h218 + (tUInt8)1u);
  if (DEF_writeCounter_EQ_0___d2)
    INST_port_0.METH_write((tUInt8)1u);
  if (DEF_writeCounter_EQ_1___d3)
    INST_port_1.METH_write((tUInt8)1u);
  INST_writeCounter.METH_write(DEF_writeCounter_PLUS_1___d4);
}

tUInt8 MOD_mkPulse::METH_RDY_send()
{
  tUInt8 DEF_CAN_FIRE_send;
  tUInt8 PORT_RDY_send;
  DEF_CAN_FIRE_send = (tUInt8)1u;
  PORT_RDY_send = DEF_CAN_FIRE_send;
  return PORT_RDY_send;
}

tUInt8 MOD_mkPulse::METH_isvalid()
{
  tUInt8 PORT_isvalid;
  DEF_port_1__h362 = INST_port_1.METH_read();
  DEF_port_0__h350 = INST_port_0.METH_read();
  DEF_port_0_OR_port_1___d7 = DEF_port_0__h350 || DEF_port_1__h362;
  PORT_isvalid = DEF_port_0_OR_port_1___d7;
  return PORT_isvalid;
}

tUInt8 MOD_mkPulse::METH_RDY_isvalid()
{
  tUInt8 DEF_CAN_FIRE_isvalid;
  tUInt8 PORT_RDY_isvalid;
  DEF_CAN_FIRE_isvalid = (tUInt8)1u;
  PORT_RDY_isvalid = DEF_CAN_FIRE_isvalid;
  return PORT_RDY_isvalid;
}

void MOD_mkPulse::METH_ishigh()
{
  tUInt8 DEF_readCounter_PLUS_1___d9;
  tUInt8 DEF_readCounter_EQ_0___d10;
  tUInt8 DEF_readCounter_EQ_1___d11;
  tUInt8 DEF_x__h402;
  DEF_x__h402 = INST_readCounter.METH_read();
  DEF_readCounter_EQ_1___d11 = DEF_x__h402 == (tUInt8)1u;
  DEF_readCounter_EQ_0___d10 = DEF_x__h402 == (tUInt8)0u;
  DEF_readCounter_PLUS_1___d9 = (tUInt8)1u & (DEF_x__h402 + (tUInt8)1u);
  INST_readCounter.METH_write(DEF_readCounter_PLUS_1___d9);
  if (DEF_readCounter_EQ_0___d10)
    INST_port_0.METH_write((tUInt8)0u);
  if (DEF_readCounter_EQ_1___d11)
    INST_port_1.METH_write((tUInt8)0u);
}

tUInt8 MOD_mkPulse::METH_RDY_ishigh()
{
  tUInt8 DEF_CAN_FIRE_ishigh;
  tUInt8 PORT_RDY_ishigh;
  DEF_port_1__h362 = INST_port_1.METH_read();
  DEF_port_0__h350 = INST_port_0.METH_read();
  DEF_port_0_OR_port_1___d7 = DEF_port_0__h350 || DEF_port_1__h362;
  DEF_CAN_FIRE_ishigh = DEF_port_0_OR_port_1___d7;
  PORT_RDY_ishigh = DEF_CAN_FIRE_ishigh;
  return PORT_RDY_ishigh;
}

void MOD_mkPulse::METH_clean()
{
  INST_port_0.METH_write((tUInt8)0u);
  INST_port_1.METH_write((tUInt8)0u);
  INST_readCounter.METH_write((tUInt8)0u);
  INST_writeCounter.METH_write((tUInt8)0u);
}

tUInt8 MOD_mkPulse::METH_RDY_clean()
{
  tUInt8 DEF_CAN_FIRE_clean;
  tUInt8 PORT_RDY_clean;
  DEF_CAN_FIRE_clean = (tUInt8)1u;
  PORT_RDY_clean = DEF_CAN_FIRE_clean;
  return PORT_RDY_clean;
}


/* Reset routines */

void MOD_mkPulse::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_writeCounter.reset_RST(ARG_rst_in);
  INST_readCounter.reset_RST(ARG_rst_in);
  INST_port_1.reset_RST(ARG_rst_in);
  INST_port_0.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkPulse::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkPulse::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_port_0.dump_state(indent + 2u);
  INST_port_1.dump_state(indent + 2u);
  INST_readCounter.dump_state(indent + 2u);
  INST_writeCounter.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkPulse::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "port_0_OR_port_1___d7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "port_0__h350", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "port_1__h362", 1u);
  num = INST_port_0.dump_VCD_defs(num);
  num = INST_port_1.dump_VCD_defs(num);
  num = INST_readCounter.dump_VCD_defs(num);
  num = INST_writeCounter.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkPulse::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkPulse &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkPulse::vcd_defs(tVCDDumpType dt, MOD_mkPulse &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_port_0_OR_port_1___d7) != DEF_port_0_OR_port_1___d7)
      {
	vcd_write_val(sim_hdl, num, DEF_port_0_OR_port_1___d7, 1u);
	backing.DEF_port_0_OR_port_1___d7 = DEF_port_0_OR_port_1___d7;
      }
      ++num;
      if ((backing.DEF_port_0__h350) != DEF_port_0__h350)
      {
	vcd_write_val(sim_hdl, num, DEF_port_0__h350, 1u);
	backing.DEF_port_0__h350 = DEF_port_0__h350;
      }
      ++num;
      if ((backing.DEF_port_1__h362) != DEF_port_1__h362)
      {
	vcd_write_val(sim_hdl, num, DEF_port_1__h362, 1u);
	backing.DEF_port_1__h362 = DEF_port_1__h362;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_port_0_OR_port_1___d7, 1u);
      backing.DEF_port_0_OR_port_1___d7 = DEF_port_0_OR_port_1___d7;
      vcd_write_val(sim_hdl, num++, DEF_port_0__h350, 1u);
      backing.DEF_port_0__h350 = DEF_port_0__h350;
      vcd_write_val(sim_hdl, num++, DEF_port_1__h362, 1u);
      backing.DEF_port_1__h362 = DEF_port_1__h362;
    }
}

void MOD_mkPulse::vcd_prims(tVCDDumpType dt, MOD_mkPulse &backing)
{
  INST_port_0.dump_VCD(dt, backing.INST_port_0);
  INST_port_1.dump_VCD(dt, backing.INST_port_1);
  INST_readCounter.dump_VCD(dt, backing.INST_readCounter);
  INST_writeCounter.dump_VCD(dt, backing.INST_writeCounter);
}
