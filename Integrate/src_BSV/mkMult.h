/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Thu Nov 29 16:06:08 IST 2018
 * 
 */

/* Generation options: */
#ifndef __mkMult_h__
#define __mkMult_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkPulse.h"


/* Class declaration for the mkMult module */
class MOD_mkMult : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUInt32> INST__unnamed_;
  MOD_Fifo<tUInt32> INST__unnamed__1;
  MOD_Reg<tUInt32> INST_av;
  MOD_Reg<tUInt32> INST_bv;
  MOD_Reg<tUInt32> INST_clk;
  MOD_Reg<tUInt32> INST_cv;
  MOD_Fifo<tUInt32> INST_outstream;
  MOD_mkPulse INST_p0;
  MOD_mkPulse INST_p1;
 
 /* Constructor */
 public:
  MOD_mkMult(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_outstream_notFull____d25;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL__CLK();
  void RL_getInput();
 
 /* Methods */
 public:
  void METH_a(tUInt32 ARG_a__a);
  tUInt8 METH_RDY_a();
  void METH_b(tUInt32 ARG_b__b);
  tUInt8 METH_RDY_b();
  void METH_clean();
  tUInt8 METH_RDY_clean();
  tUInt32 METH_out();
  tUInt8 METH_RDY_out();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMult &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkMult &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkMult &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkMult &backing);
};

#endif /* ifndef __mkMult_h__ */
