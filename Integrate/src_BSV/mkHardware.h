/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Thu Nov 29 16:06:08 IST 2018
 * 
 */

/* Generation options: */
#ifndef __mkHardware_h__
#define __mkHardware_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkConv3.h"
#include "mkPulse.h"
#include "mkBuffer.h"


/* Class declaration for the mkHardware module */
class MOD_mkHardware : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST__unnamed_;
  MOD_Reg<tUInt8> INST__unnamed__1;
  MOD_Fifo<tUInt32> INST__unnamed__10;
  MOD_Fifo<tUInt32> INST__unnamed__11;
  MOD_Fifo<tUInt32> INST__unnamed__12;
  MOD_Fifo<tUInt32> INST__unnamed__13;
  MOD_Fifo<tUInt32> INST__unnamed__14;
  MOD_Fifo<tUInt32> INST__unnamed__15;
  MOD_mkConv3 INST__unnamed__16;
  MOD_Reg<tUInt32> INST__unnamed__2;
  MOD_Fifo<tUInt8> INST__unnamed__3;
  MOD_mkPulse INST__unnamed__4;
  MOD_mkPulse INST__unnamed__5;
  MOD_Reg<tUInt32> INST__unnamed__6;
  MOD_Fifo<tUInt32> INST__unnamed__7;
  MOD_Fifo<tUInt32> INST__unnamed__8;
  MOD_Fifo<tUInt32> INST__unnamed__9;
  MOD_Reg<tUInt32> INST_clk;
  MOD_Reg<tUInt32> INST_clk_1;
  MOD_Reg<tUInt32> INST_clk_2;
  MOD_Reg<tUInt8> INST_init;
  MOD_Fifo<tUInt32> INST_instream_0;
  MOD_mkPulse INST_line;
  MOD_Reg<tUInt8> INST_line_1;
  MOD_mkPulse INST_line_2;
  MOD_mkPulse INST_line_3;
  MOD_mkPulse INST_line_4;
  MOD_mkPulse INST_line_5;
  MOD_Reg<tUInt8> INST_line_6;
  MOD_Fifo<tUInt8> INST_line_7;
  MOD_Fifo<tUInt8> INST_line_8;
  MOD_Fifo<tUInt8> INST_line_9;
  MOD_Reg<tUInt8> INST_line_c0_0;
  MOD_Reg<tUInt8> INST_line_c0_1;
  MOD_Reg<tUInt8> INST_line_c0_2;
  MOD_Reg<tUInt32> INST_line_c1;
  MOD_Reg<tUInt32> INST_line_c2;
  MOD_Reg<tUInt8> INST_line_cStride;
  MOD_Reg<tUInt32> INST_line_clk;
  MOD_Fifo<tUInt32> INST_line_data_0;
  MOD_Fifo<tUInt32> INST_line_data_1;
  MOD_Fifo<tUInt32> INST_line_data_2;
  MOD_Reg<tUWide> INST_line_fQ;
  MOD_Reg<tUInt32> INST_line_forwardingQ_0;
  MOD_Fifo<tUWide> INST_line_holder;
  MOD_Reg<tUInt32> INST_line_img;
  MOD_mkBuffer INST_line_inputFmap_0;
  MOD_mkBuffer INST_line_inputFmap_1;
  MOD_mkBuffer INST_line_inputFmap_2;
  MOD_Fifo<tUInt32> INST_line_instream_0;
  MOD_mkPulse INST_line_l1_0;
  MOD_mkPulse INST_line_l1_1;
  MOD_mkPulse INST_line_l1_2;
  MOD_mkPulse INST_line_l_0;
  MOD_mkPulse INST_line_l_1;
  MOD_mkPulse INST_line_l_2;
  MOD_Fifo<tUWide> INST_line_outQ;
  MOD_Reg<tUInt8> INST_line_p0;
  MOD_Reg<tUInt8> INST_line_r1;
  MOD_Reg<tUInt8> INST_line_r2;
  MOD_Reg<tUInt8> INST_line_rStride;
  MOD_Reg<tUInt8> INST_line_readEnable;
  MOD_Reg<tUInt32> INST_line_res;
  MOD_Reg<tUInt32> INST_line_store_0;
  MOD_Reg<tUInt32> INST_line_store_1;
  MOD_Reg<tUInt32> INST_line_store_2;
  MOD_Reg<tUInt32> INST_line_windowBuffer_0;
  MOD_Reg<tUInt32> INST_line_windowBuffer_1;
  MOD_Reg<tUInt32> INST_line_windowBuffer_2;
  MOD_Reg<tUInt32> INST_line_windowBuffer_3;
  MOD_Reg<tUInt32> INST_line_windowBuffer_4;
  MOD_Reg<tUInt32> INST_line_windowBuffer_5;
  MOD_Reg<tUInt32> INST_line_windowBuffer_6;
  MOD_Reg<tUInt32> INST_line_windowBuffer_7;
  MOD_Reg<tUInt32> INST_line_windowBuffer_8;
  MOD_Fifo<tUInt32> INST_outQ_0_0;
  MOD_Fifo<tUInt32> INST_outQ_0_1;
  MOD_Fifo<tUInt32> INST_outQ_0_2;
  MOD_Fifo<tUInt32> INST_outQ_0_3;
  MOD_Fifo<tUInt32> INST_outQ_0_4;
  MOD_Fifo<tUInt32> INST_outQ_0_5;
  MOD_Fifo<tUInt32> INST_outQ_0_6;
  MOD_Fifo<tUInt32> INST_outQ_0_7;
  MOD_Fifo<tUInt32> INST_outQ_1_0;
  MOD_Fifo<tUInt32> INST_outQ_1_1;
  MOD_Fifo<tUInt32> INST_outQ_1_2;
  MOD_Fifo<tUInt32> INST_outQ_1_3;
  MOD_Fifo<tUInt32> INST_outQ_1_4;
  MOD_Fifo<tUInt32> INST_outQ_1_5;
  MOD_Fifo<tUInt32> INST_outQ_1_6;
  MOD_Fifo<tUInt32> INST_outQ_1_7;
  MOD_Fifo<tUInt32> INST_outQ_2_0;
  MOD_Fifo<tUInt32> INST_outQ_2_1;
  MOD_Fifo<tUInt32> INST_outQ_2_2;
  MOD_Fifo<tUInt32> INST_outQ_2_3;
  MOD_Fifo<tUInt32> INST_outQ_2_4;
  MOD_Fifo<tUInt32> INST_outQ_2_5;
  MOD_Fifo<tUInt32> INST_outQ_2_6;
  MOD_Fifo<tUInt32> INST_outQ_2_7;
  MOD_Fifo<tUInt32> INST_outQ_3_0;
  MOD_Fifo<tUInt32> INST_outQ_3_1;
  MOD_Fifo<tUInt32> INST_outQ_3_2;
  MOD_Fifo<tUInt32> INST_outQ_3_3;
  MOD_Fifo<tUInt32> INST_outQ_3_4;
  MOD_Fifo<tUInt32> INST_outQ_3_5;
  MOD_Fifo<tUInt32> INST_outQ_3_6;
  MOD_Fifo<tUInt32> INST_outQ_3_7;
  MOD_Fifo<tUInt32> INST_outQ_4_0;
  MOD_Fifo<tUInt32> INST_outQ_4_1;
  MOD_Fifo<tUInt32> INST_outQ_4_2;
  MOD_Fifo<tUInt32> INST_outQ_4_3;
  MOD_Fifo<tUInt32> INST_outQ_4_4;
  MOD_Fifo<tUInt32> INST_outQ_4_5;
  MOD_Fifo<tUInt32> INST_outQ_4_6;
  MOD_Fifo<tUInt32> INST_outQ_4_7;
  MOD_Fifo<tUInt32> INST_outQ_5_0;
  MOD_Fifo<tUInt32> INST_outQ_5_1;
  MOD_Fifo<tUInt32> INST_outQ_5_2;
  MOD_Fifo<tUInt32> INST_outQ_5_3;
  MOD_Fifo<tUInt32> INST_outQ_5_4;
  MOD_Fifo<tUInt32> INST_outQ_5_5;
  MOD_Fifo<tUInt32> INST_outQ_5_6;
  MOD_Fifo<tUInt32> INST_outQ_5_7;
  MOD_Fifo<tUInt32> INST_outQ_6_0;
  MOD_Fifo<tUInt32> INST_outQ_6_1;
  MOD_Fifo<tUInt32> INST_outQ_6_2;
  MOD_Fifo<tUInt32> INST_outQ_6_3;
  MOD_Fifo<tUInt32> INST_outQ_6_4;
  MOD_Fifo<tUInt32> INST_outQ_6_5;
  MOD_Fifo<tUInt32> INST_outQ_6_6;
  MOD_Fifo<tUInt32> INST_outQ_6_7;
  MOD_Fifo<tUInt32> INST_outQ_7_0;
  MOD_Fifo<tUInt32> INST_outQ_7_1;
  MOD_Fifo<tUInt32> INST_outQ_7_2;
  MOD_Fifo<tUInt32> INST_outQ_7_3;
  MOD_Fifo<tUInt32> INST_outQ_7_4;
  MOD_Fifo<tUInt32> INST_outQ_7_5;
  MOD_Fifo<tUInt32> INST_outQ_7_6;
  MOD_Fifo<tUInt32> INST_outQ_7_7;
  MOD_Fifo<tUInt32> INST_out_0_0;
  MOD_Fifo<tUInt32> INST_outstream_0_0;
  MOD_Reg<tUInt32> INST_recv;
  MOD_Reg<tUInt32> INST_send;
 
 /* Constructor */
 public:
  MOD_mkHardware(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_instream_0_i_notFull____d279;
  tUInt8 DEF_send_83_ULT_197___d284;
  tUInt32 DEF_b__h145101;
  tUInt32 DEF_b__h145093;
  tUInt8 DEF_b__h39244;
  tUInt8 DEF_x__h17300;
  tUInt8 DEF_recv_80_ULT_256___d281;
 
 /* Local definitions */
 private:
  tUWide DEF_line_holder_first____d184;
  tUWide DEF_line_outQ_first____d229;
  tUInt32 DEF_line_windowBuffer_8__h38781;
  tUInt32 DEF_line_windowBuffer_7__h38835;
  tUInt32 DEF_line_windowBuffer_6__h38889;
  tUInt32 DEF_line_windowBuffer_5__h38943;
  tUInt32 DEF_line_windowBuffer_4__h38997;
  tUInt32 DEF_line_windowBuffer_3__h39051;
  tUInt32 DEF_x__h16764;
  tUInt32 DEF_x__h16760;
  tUInt32 DEF_x__h16756;
  tUInt32 DEF_b__h14299;
  tUInt32 DEF__read_i__h16766;
  tUInt32 DEF__read_i__h16758;
  tUInt32 DEF__read_i__h16762;
  tUInt8 DEF__read_f__h16767;
  tUInt8 DEF__read_f__h16759;
  tUInt8 DEF__read_f__h16763;
  tUInt32 DEF_line_img_8_MINUS_1___d19;
  tUWide DEF__0_CONCAT_line_holder_first__84_BITS_95_TO_48_99___d200;
  tUWide DEF__0_CONCAT_unnamed__15_first__60_61_CONCAT_unnam_ETC___d273;
  tUWide DEF__0_CONCAT_unnamed__15_first__60_61_CONCAT_unnam_ETC___d270;
  tUWide DEF_DONTCARE_CONCAT_line_windowBuffer_8_32_59_CONC_ETC___d166;
  tUWide DEF_DONTCARE_CONCAT_line_windowBuffer_8_32_59_CONC_ETC___d163;
  tUWide DEF__0_CONCAT_line_holder_first__84_BITS_143_TO_128_ETC___d198;
  tUWide DEF__0_CONCAT_line_holder_first__84_BITS_143_TO_128_ETC___d195;
  tUWide DEF__0_CONCAT_unnamed__15_first__60_61_CONCAT_unnam_ETC___d267;
  tUWide DEF_DONTCARE_CONCAT_line_windowBuffer_8_32_59_CONC_ETC___d161;
  tUWide DEF__0_CONCAT_line_holder_first__84_BITS_143_TO_128_ETC___d192;
  tUWide DEF__0_CONCAT_unnamed__15_first__60_61_CONCAT_unnam_ETC___d264;
  tUWide DEF_DONTCARE_CONCAT_line_windowBuffer_8_32_59_CONC_ETC___d160;
  tUWide DEF__0_CONCAT_line_holder_first__84_BITS_143_TO_128_ETC___d189;
  tUWide DEF__0_CONCAT_unnamed__15_first__60___d261;
  tUWide DEF_DONTCARE_CONCAT_line_windowBuffer_8_32___d159;
  tUWide DEF__0_CONCAT_line_holder_first__84_BITS_143_TO_128_85___d186;
 
 /* Rules */
 public:
  void RL__pop();
  void RL_line__CLK();
  void RL_line__DRAMFetch();
  void RL_line__BRAMfetch();
  void RL_line__latchData();
  void RL_line__storeData();
  void RL_line__getData();
  void RL_line__latchData_1();
  void RL_line__storeData_1();
  void RL_line__getData_1();
  void RL_line__latchData_2();
  void RL_line__storeData_2();
  void RL_line__getData_2();
  void RL_line_collect();
  void RL_line__HoldBuffer();
  void RL_line__reboot();
  void RL_line__reboot_mem();
  void RL_line_send();
  void RL__CLK();
  void RL__input();
  void RL_get();
  void RL__CLK_1();
  void RL_inputx();
  void RL__output();
  void RL_initialize();
  void RL__pad();
  void RL_flushOut();
  void RL__ClearPipe();
  void RL__ResetDone();
  void RL__ResetDone2();
 
 /* Methods */
 public:
  tUInt32 METH_get();
  tUInt8 METH_RDY_get();
  void METH_put(tUInt32 ARG_put_datas);
  tUInt8 METH_RDY_put();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkHardware &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkHardware &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkHardware &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkHardware &backing);
};

#endif /* ifndef __mkHardware_h__ */
