/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Thu Nov 29 16:06:08 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkMult.h"


/* Constructor */
MOD_mkMult::MOD_mkMult(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST__unnamed_(simHdl, "_unnamed_", this, 16u, 2u, 1u, 0u),
    INST__unnamed__1(simHdl, "_unnamed__1", this, 16u, 2u, 1u, 0u),
    INST_av(simHdl, "av", this, 16u, 0u, (tUInt8)0u),
    INST_bv(simHdl, "bv", this, 16u, 0u, (tUInt8)0u),
    INST_clk(simHdl, "clk", this, 32u, 0u, (tUInt8)0u),
    INST_cv(simHdl, "cv", this, 16u, 0u, (tUInt8)0u),
    INST_outstream(simHdl, "outstream", this, 16u, 2u, 1u, 0u),
    INST_p0(simHdl, "p0", this),
    INST_p1(simHdl, "p1", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 11u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMult::init_symbols_0()
{
  init_symbol(&symbols[0u], "_unnamed_", SYM_MODULE, &INST__unnamed_);
  init_symbol(&symbols[1u], "_unnamed__1", SYM_MODULE, &INST__unnamed__1);
  init_symbol(&symbols[2u], "av", SYM_MODULE, &INST_av);
  init_symbol(&symbols[3u], "bv", SYM_MODULE, &INST_bv);
  init_symbol(&symbols[4u], "clk", SYM_MODULE, &INST_clk);
  init_symbol(&symbols[5u], "cv", SYM_MODULE, &INST_cv);
  init_symbol(&symbols[6u], "outstream", SYM_MODULE, &INST_outstream);
  init_symbol(&symbols[7u], "p0", SYM_MODULE, &INST_p0);
  init_symbol(&symbols[8u], "p1", SYM_MODULE, &INST_p1);
  init_symbol(&symbols[9u], "RL__CLK", SYM_RULE);
  init_symbol(&symbols[10u], "RL_getInput", SYM_RULE);
}


/* Rule actions */

void MOD_mkMult::RL__CLK()
{
  tUInt32 DEF_b__h528;
  tUInt32 DEF_clk_PLUS_1___d2;
  DEF_b__h528 = INST_clk.METH_read();
  DEF_clk_PLUS_1___d2 = DEF_b__h528 + 1u;
  INST_clk.METH_write(DEF_clk_PLUS_1___d2);
}

void MOD_mkMult::RL_getInput()
{
  tUInt32 DEF_x__h685;
  tUInt32 DEF_x__h705;
  tUInt32 DEF_IF_unnamed__first_BIT_15_THEN_NEG_unnamed__fir_ETC___d21;
  tUInt8 DEF_unnamed__1_first__0_BIT_15___d11;
  tUInt8 DEF_unnamed__first_BIT_15___d9;
  tUInt32 DEF_x__h620;
  tUInt32 DEF_x_BITS_21_TO_6___h728;
  tUInt32 DEF_x__h702;
  tUInt32 DEF_x__h722;
  DEF_x__h722 = INST__unnamed__1.METH_first();
  DEF_x__h702 = INST__unnamed_.METH_first();
  DEF_unnamed__first_BIT_15___d9 = (tUInt8)(DEF_x__h702 >> 15u);
  DEF_unnamed__1_first__0_BIT_15___d11 = (tUInt8)(DEF_x__h722 >> 15u);
  DEF_x__h705 = DEF_unnamed__1_first__0_BIT_15___d11 ? 65535u & -DEF_x__h722 : DEF_x__h722;
  DEF_x__h685 = DEF_unnamed__first_BIT_15___d9 ? 65535u & -DEF_x__h702 : DEF_x__h702;
  DEF_IF_unnamed__first_BIT_15_THEN_NEG_unnamed__fir_ETC___d21 = DEF_x__h685 * DEF_x__h705;
  DEF_x__h620 = (DEF_unnamed__first_BIT_15___d9 && !DEF_unnamed__1_first__0_BIT_15___d11) || (DEF_unnamed__1_first__0_BIT_15___d11 && !DEF_unnamed__first_BIT_15___d9) ? -DEF_IF_unnamed__first_BIT_15_THEN_NEG_unnamed__fir_ETC___d21 : DEF_IF_unnamed__first_BIT_15_THEN_NEG_unnamed__fir_ETC___d21;
  DEF_x_BITS_21_TO_6___h728 = (tUInt32)(65535u & (DEF_x__h620 >> 6u));
  INST__unnamed_.METH_deq();
  INST__unnamed__1.METH_deq();
  INST_outstream.METH_enq(DEF_x_BITS_21_TO_6___h728);
}


/* Methods */

void MOD_mkMult::METH_a(tUInt32 ARG_a__a)
{
  INST__unnamed_.METH_enq(ARG_a__a);
}

tUInt8 MOD_mkMult::METH_RDY_a()
{
  tUInt8 DEF_CAN_FIRE_a;
  tUInt8 PORT_RDY_a;
  DEF_outstream_notFull____d25 = INST_outstream.METH_notFull();
  DEF_CAN_FIRE_a = DEF_outstream_notFull____d25 && INST__unnamed_.METH_i_notFull();
  PORT_RDY_a = DEF_CAN_FIRE_a;
  return PORT_RDY_a;
}

void MOD_mkMult::METH_b(tUInt32 ARG_b__b)
{
  INST__unnamed__1.METH_enq(ARG_b__b);
}

tUInt8 MOD_mkMult::METH_RDY_b()
{
  tUInt8 DEF_CAN_FIRE_b;
  tUInt8 PORT_RDY_b;
  DEF_outstream_notFull____d25 = INST_outstream.METH_notFull();
  DEF_CAN_FIRE_b = DEF_outstream_notFull____d25 && INST__unnamed__1.METH_i_notFull();
  PORT_RDY_b = DEF_CAN_FIRE_b;
  return PORT_RDY_b;
}

void MOD_mkMult::METH_clean()
{
  INST_outstream.METH_clear();
  INST_p1.METH_clean();
  INST_p0.METH_clean();
  INST__unnamed_.METH_clear();
  INST__unnamed__1.METH_clear();
}

tUInt8 MOD_mkMult::METH_RDY_clean()
{
  tUInt8 DEF_CAN_FIRE_clean;
  tUInt8 PORT_RDY_clean;
  DEF_CAN_FIRE_clean = (tUInt8)1u;
  PORT_RDY_clean = DEF_CAN_FIRE_clean;
  return PORT_RDY_clean;
}

tUInt32 MOD_mkMult::METH_out()
{
  tUInt32 DEF_out__avValue1;
  tUInt32 PORT_out;
  DEF_out__avValue1 = INST_outstream.METH_first();
  PORT_out = DEF_out__avValue1;
  INST_outstream.METH_deq();
  return PORT_out;
}

tUInt8 MOD_mkMult::METH_RDY_out()
{
  tUInt8 DEF_CAN_FIRE_out;
  tUInt8 PORT_RDY_out;
  DEF_CAN_FIRE_out = INST_outstream.METH_i_notEmpty();
  PORT_RDY_out = DEF_CAN_FIRE_out;
  return PORT_RDY_out;
}


/* Reset routines */

void MOD_mkMult::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_p1.reset_RST_N(ARG_rst_in);
  INST_p0.reset_RST_N(ARG_rst_in);
  INST_outstream.reset_RST(ARG_rst_in);
  INST_cv.reset_RST(ARG_rst_in);
  INST_clk.reset_RST(ARG_rst_in);
  INST_bv.reset_RST(ARG_rst_in);
  INST_av.reset_RST(ARG_rst_in);
  INST__unnamed__1.reset_RST(ARG_rst_in);
  INST__unnamed_.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMult::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMult::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST__unnamed_.dump_state(indent + 2u);
  INST__unnamed__1.dump_state(indent + 2u);
  INST_av.dump_state(indent + 2u);
  INST_bv.dump_state(indent + 2u);
  INST_clk.dump_state(indent + 2u);
  INST_cv.dump_state(indent + 2u);
  INST_outstream.dump_state(indent + 2u);
  INST_p0.dump_state(indent + 2u);
  INST_p1.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMult::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 9u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "outstream_notFull____d25", 1u);
  num = INST__unnamed_.dump_VCD_defs(num);
  num = INST__unnamed__1.dump_VCD_defs(num);
  num = INST_av.dump_VCD_defs(num);
  num = INST_bv.dump_VCD_defs(num);
  num = INST_clk.dump_VCD_defs(num);
  num = INST_cv.dump_VCD_defs(num);
  num = INST_outstream.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_p0.dump_VCD_defs(l);
    num = INST_p1.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMult::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMult &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkMult::vcd_defs(tVCDDumpType dt, MOD_mkMult &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_outstream_notFull____d25) != DEF_outstream_notFull____d25)
      {
	vcd_write_val(sim_hdl, num, DEF_outstream_notFull____d25, 1u);
	backing.DEF_outstream_notFull____d25 = DEF_outstream_notFull____d25;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_outstream_notFull____d25, 1u);
      backing.DEF_outstream_notFull____d25 = DEF_outstream_notFull____d25;
    }
}

void MOD_mkMult::vcd_prims(tVCDDumpType dt, MOD_mkMult &backing)
{
  INST__unnamed_.dump_VCD(dt, backing.INST__unnamed_);
  INST__unnamed__1.dump_VCD(dt, backing.INST__unnamed__1);
  INST_av.dump_VCD(dt, backing.INST_av);
  INST_bv.dump_VCD(dt, backing.INST_bv);
  INST_clk.dump_VCD(dt, backing.INST_clk);
  INST_cv.dump_VCD(dt, backing.INST_cv);
  INST_outstream.dump_VCD(dt, backing.INST_outstream);
}

void MOD_mkMult::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkMult &backing)
{
  INST_p0.dump_VCD(dt, levels, backing.INST_p0);
  INST_p1.dump_VCD(dt, levels, backing.INST_p1);
}
