/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Thu Nov 29 16:06:08 IST 2018
 * 
 */

/* Generation options: */
#ifndef __mkConv3_h__
#define __mkConv3_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMult.h"
#include "mkPulse.h"


/* Class declaration for the mkConv3 module */
class MOD_mkConv3 : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUWide> INST__unnamed_;
  MOD_Fifo<tUInt32> INST__unnamed__1;
  MOD_mkMult INST__unnamed__10;
  MOD_mkMult INST__unnamed__11;
  MOD_Fifo<tUInt32> INST__unnamed__2;
  MOD_mkMult INST__unnamed__3;
  MOD_mkMult INST__unnamed__4;
  MOD_mkMult INST__unnamed__5;
  MOD_mkMult INST__unnamed__6;
  MOD_mkMult INST__unnamed__7;
  MOD_mkMult INST__unnamed__8;
  MOD_mkMult INST__unnamed__9;
  MOD_mkPulse INST_a0;
  MOD_mkPulse INST_a1;
  MOD_Reg<tUInt32> INST_acc4;
  MOD_Reg<tUInt32> INST_acc5;
  MOD_Reg<tUInt32> INST_acc6;
  MOD_Fifo<tUInt32> INST_accumulator1_0;
  MOD_Fifo<tUInt32> INST_accumulator1_1;
  MOD_Fifo<tUInt32> INST_accumulator1_2;
  MOD_Fifo<tUInt32> INST_accumulator1_3;
  MOD_Fifo<tUInt32> INST_accumulator1_4;
  MOD_Fifo<tUInt32> INST_accumulator1_5;
  MOD_Fifo<tUInt32> INST_accumulator1_6;
  MOD_Fifo<tUInt32> INST_accumulator1_7;
  MOD_Fifo<tUInt32> INST_accumulator1_8;
  MOD_Fifo<tUInt32> INST_accumulator2_0;
  MOD_Fifo<tUInt32> INST_accumulator2_1;
  MOD_Fifo<tUInt32> INST_accumulator2_2;
  MOD_Reg<tUInt32> INST_accumulator3;
  MOD_Reg<tUInt8> INST_c0;
  MOD_Reg<tUInt8> INST_c3;
  MOD_Wire<tUInt8> INST_cl;
  MOD_Reg<tUInt32> INST_clk;
  MOD_Reg<tUInt32> INST_coeffs_0;
  MOD_Reg<tUInt32> INST_coeffs_1;
  MOD_Reg<tUInt32> INST_coeffs_2;
  MOD_Reg<tUInt32> INST_coeffs_3;
  MOD_Reg<tUInt32> INST_coeffs_4;
  MOD_Reg<tUInt32> INST_coeffs_5;
  MOD_Reg<tUInt32> INST_coeffs_6;
  MOD_Reg<tUInt32> INST_coeffs_7;
  MOD_Reg<tUInt32> INST_coeffs_8;
  MOD_Reg<tUInt8> INST_p0;
  MOD_Reg<tUInt8> INST_p3;
  MOD_Reg<tUInt8> INST_w;
  MOD_Wire<tUInt8> INST_wc_0;
  MOD_Wire<tUInt8> INST_wc_1;
  MOD_Wire<tUInt8> INST_wc_2;
  MOD_Wire<tUInt8> INST_wc_3;
  MOD_Wire<tUInt8> INST_wc_4;
  MOD_Wire<tUInt8> INST_wc_5;
  MOD_Wire<tUInt8> INST_wc_6;
  MOD_Wire<tUInt8> INST_wc_7;
  MOD_Wire<tUInt8> INST_wc_8;
  MOD_Wire<tUInt32> INST_window_0;
  MOD_Wire<tUInt32> INST_window_1;
  MOD_Wire<tUInt32> INST_window_2;
  MOD_Wire<tUInt32> INST_window_3;
  MOD_Wire<tUInt32> INST_window_4;
  MOD_Wire<tUInt32> INST_window_5;
  MOD_Wire<tUInt32> INST_window_6;
  MOD_Wire<tUInt32> INST_window_7;
  MOD_Wire<tUInt32> INST_window_8;
 
 /* Constructor */
 public:
  MOD_mkConv3(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_sendF_filter;
  tUWide PORT_sendP_datas;
 
 /* Publicly accessible definitions */
 public:
 
 /* Local definitions */
 private:
  tUWide DEF__unnamed__first____d4;
  tUWide DEF_x__h11658;
 
 /* Rules */
 public:
  void RL__clk();
  void RL__input_decompose();
  void RL__pushMAC();
  void RL__ac1();
  void RL__pushMAC_1();
  void RL__ac1_1();
  void RL__pushMAC_2();
  void RL__ac1_2();
  void RL__pushMAC_3();
  void RL__ac1_3();
  void RL__pushMAC_4();
  void RL__ac1_4();
  void RL__pushMAC_5();
  void RL__ac1_5();
  void RL__pushMAC_6();
  void RL__ac1_6();
  void RL__pushMAC_7();
  void RL__ac1_7();
  void RL__pushMAC_8();
  void RL__ac1_8();
  void RL__ac2();
  void RL__ac3();
  void RL__clean();
 
 /* Methods */
 public:
  void METH_sendP(tUWide ARG_sendP_datas);
  tUInt8 METH_RDY_sendP();
  void METH_sendF(tUWide ARG_sendF_filter);
  tUInt8 METH_RDY_sendF();
  tUInt32 METH_result();
  tUInt8 METH_RDY_result();
  void METH_clean();
  tUInt8 METH_RDY_clean();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkConv3 &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkConv3 &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkConv3 &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkConv3 &backing);
};

#endif /* ifndef __mkConv3_h__ */
