/*
 * Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
 * 
 * On Thu Nov 29 16:06:08 IST 2018
 * 
 */

/* Generation options: */
#ifndef __mkBuffer_h__
#define __mkBuffer_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkBuffer module */
class MOD_mkBuffer : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST__unnamed_;
  MOD_BRAM<tUInt32,tUInt32,tUInt8> INST_memory_memory;
  MOD_Reg<tUInt8> INST_memory_serverAdapterA_cnt;
  MOD_Wire<tUInt8> INST_memory_serverAdapterA_cnt_1;
  MOD_Wire<tUInt8> INST_memory_serverAdapterA_cnt_2;
  MOD_Wire<tUInt8> INST_memory_serverAdapterA_cnt_3;
  MOD_Fifo<tUInt32> INST_memory_serverAdapterA_outDataCore;
  MOD_Wire<tUInt8> INST_memory_serverAdapterA_outData_deqCalled;
  MOD_Wire<tUInt32> INST_memory_serverAdapterA_outData_enqData;
  MOD_Wire<tUInt32> INST_memory_serverAdapterA_outData_outData;
  MOD_Reg<tUInt8> INST_memory_serverAdapterA_s1;
  MOD_Wire<tUInt8> INST_memory_serverAdapterA_s1_1;
  MOD_Wire<tUInt8> INST_memory_serverAdapterA_writeWithResp;
  MOD_Reg<tUInt8> INST_memory_serverAdapterB_cnt;
  MOD_Wire<tUInt8> INST_memory_serverAdapterB_cnt_1;
  MOD_Wire<tUInt8> INST_memory_serverAdapterB_cnt_2;
  MOD_Wire<tUInt8> INST_memory_serverAdapterB_cnt_3;
  MOD_Fifo<tUInt32> INST_memory_serverAdapterB_outDataCore;
  MOD_Wire<tUInt8> INST_memory_serverAdapterB_outData_deqCalled;
  MOD_Wire<tUInt32> INST_memory_serverAdapterB_outData_enqData;
  MOD_Wire<tUInt32> INST_memory_serverAdapterB_outData_outData;
  MOD_Reg<tUInt8> INST_memory_serverAdapterB_s1;
  MOD_Wire<tUInt8> INST_memory_serverAdapterB_s1_1;
  MOD_Wire<tUInt8> INST_memory_serverAdapterB_writeWithResp;
 
 /* Constructor */
 public:
  MOD_mkBuffer(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_memory_serverAdapterB_outDataCore_notEmpty__9__ETC___d118;
  tUInt8 DEF_b__h2337;
  tUInt8 DEF_b__h969;
  tUInt8 DEF_memory_serverAdapterB_s1___d108;
  tUInt8 DEF_memory_serverAdapterA_s1___d51;
  tUInt8 DEF_memory_serverAdapterB_cnt_3_whas____d80;
  tUInt8 DEF_memory_serverAdapterB_cnt_2_whas____d78;
  tUInt8 DEF_memory_serverAdapterB_cnt_1_whas____d77;
  tUInt8 DEF_memory_serverAdapterB_outData_enqData_whas____d63;
  tUInt8 DEF_memory_serverAdapterB_outDataCore_notEmpty____d59;
  tUInt8 DEF_memory_serverAdapterA_cnt_3_whas____d23;
  tUInt8 DEF_memory_serverAdapterA_cnt_2_whas____d21;
  tUInt8 DEF_memory_serverAdapterA_cnt_1_whas____d20;
 
 /* Local definitions */
 private:
  tUInt32 DEF_memory_serverAdapterB_outData_outData_wget____d115;
  tUInt32 DEF_x__h1886;
  tUInt32 DEF_x__h513;
 
 /* Rules */
 public:
  void RL_memory_serverAdapterA_outData_setFirstCore();
  void RL_memory_serverAdapterA_outData_setFirstEnq();
  void RL_memory_serverAdapterA_outData_enqOnly();
  void RL_memory_serverAdapterA_outData_deqOnly();
  void RL_memory_serverAdapterA_outData_enqAndDeq();
  void RL_memory_serverAdapterA_cnt_finalAdd();
  void RL_memory_serverAdapterA_s1__dreg_update();
  void RL_memory_serverAdapterA_stageReadResponseAlways();
  void RL_memory_serverAdapterA_moveToOutFIFO();
  void RL_memory_serverAdapterA_overRun();
  void RL_memory_serverAdapterB_outData_setFirstCore();
  void RL_memory_serverAdapterB_outData_setFirstEnq();
  void RL_memory_serverAdapterB_outData_enqOnly();
  void RL_memory_serverAdapterB_outData_deqOnly();
  void RL_memory_serverAdapterB_outData_enqAndDeq();
  void RL_memory_serverAdapterB_cnt_finalAdd();
  void RL_memory_serverAdapterB_s1__dreg_update();
  void RL_memory_serverAdapterB_stageReadResponseAlways();
  void RL_memory_serverAdapterB_moveToOutFIFO();
  void RL_memory_serverAdapterB_overRun();
 
 /* Methods */
 public:
  void METH_enq(tUInt32 ARG_enq_val, tUInt32 ARG_enq_c);
  tUInt8 METH_RDY_enq();
  void METH_latchData();
  tUInt8 METH_RDY_latchData();
  void METH_deq(tUInt32 ARG_deq_c);
  tUInt8 METH_RDY_deq();
  void METH_clean();
  tUInt8 METH_RDY_clean();
  tUInt32 METH_get();
  tUInt8 METH_RDY_get();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBuffer &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkBuffer &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkBuffer &backing);
};

#endif /* ifndef __mkBuffer_h__ */
